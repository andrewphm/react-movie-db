{"version":3,"sources":["images/react-movie-logo.svg","images/tmdb_logo.svg","components/Header/Header.styles.js","components/Header/index.js","config.js","components/HeroImage/HeroImage.styles.js","components/HeroImage/index.js","components/Grid/Grid.styles.js","components/Grid/index.js","components/Thumb/Thumb.styles.js","components/Thumb/index.js","components/Spinner/index.js","components/Spinner/Spinner.styles.js","images/search-icon.svg","components/SearchBar/SearchBar.styles.js","components/SearchBar/index.js","components/Button/Button.styles.js","components/Button/index.js","API.js","helpers.js","hooks/useHomeFetch.js","images/no_image.jpg","components/Home.js","components/BreadCrumb/BreadCrumb.styles.js","components/BreadCrumb/index.js","components/MovieInfo/MovieInfo.styles.js","components/MovieInfo/index.js","components/MovieInfoBar/MovieInfoBar.styles.js","components/MovieInfoBar/index.js","components/Actor/Actor.styles.js","components/Actor/index.js","components/Movie.js","hooks/useMovieFetch.js","components/NotFound.js","GlobalStyle.js","App.js","index.js"],"names":["Wrapper","styled","div","Content","LogoImg","img","TMDBLogoImg","Header","to","src","RMDBLogo","alt","href","target","rel","TMDBLogo","API_URL","API_KEY","process","SEARCH_BASE_URL","POPULAR_BASE_URL","REQUEST_TOKEN_URL","LOGIN_URL","SESSION_ID_URL","IMAGE_BASE_URL","BACKDROP_SIZE","POSTER_SIZE","image","Text","HeroImage","title","text","Grid","header","children","Image","Thumb","movieId","clickable","Spinner","SearchBar","setSearchTerm","useState","state","setState","initial","useRef","console","log","useEffect","current","timer","setTimeout","clearTimeout","searchIcon","type","placeholder","onChange","event","currentTarget","value","button","Button","callback","onClick","defaultConfig","method","headers","apiSettings","fetchMovies","searchTerm","page","a","endpoint","fetch","json","fetchMovie","fetchCredits","creditsEndpoint","getRequestToken","reqToken","request_token","authenticate","requestToken","username","password","bodyData","body","JSON","stringify","success","sessionId","rateMovie","rating","calcTime","time","hours","Math","floor","mins","convertMoney","money","Intl","NumberFormat","style","currency","minimumFractionDigits","format","isPersistedState","stateName","sessionState","sessionStorage","getItem","parse","initialState","results","total_pages","total_results","Home","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","API","movies","prev","setItem","useHomeFetch","backdrop_path","original_title","overview","map","movie","poster_path","NoImage","id","BreadCrumb","movieTitle","backdrop","MovieInfo","className","vote_average","directors","length","director","name","credit_id","MovieInfoBar","budget","revenue","Actor","character","imageUrl","Movie","credits","crew","filter","member","job","actors","cast","useMovieFetch","useParams","runtime","actor","profile_path","NotFound","GlobalStyle","createGlobalStyle","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.136a31c5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/react-movie-logo.42955eb6.svg\";","export default __webpack_public_path__ + \"static/media/tmdb_logo.f15b6632.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    background: var(--darkGrey);\n    padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    max-width: var(--maxWidth);\n    padding: 20px 0;\n    margin: 0 auto;\n`;\n\nexport const LogoImg = styled.img`\n    width: 200px;\n\n    @media screen and (max-width: 500px) {\n        width: 150px;\n    }\n`;\n\nexport const TMDBLogoImg = styled.img`\n    width: 100px;\n\n    @media (max-width: 500px) {\n        width: 80px;\n    }\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n// Svg logos\nimport RMDBLogo from '../../images/react-movie-logo.svg';\nimport TMDBLogo from '../../images/tmdb_logo.svg';\n\n// Styles\nimport { Wrapper, Content, LogoImg, TMDBLogoImg } from './Header.styles';\n\n// Functional components with hooks\nconst Header = () => (\n    <Wrapper>\n        <Content>\n            <Link to='/react-movie-db'>\n                <LogoImg src={RMDBLogo} alt='rmdb-logo' />\n            </Link>\n            <a href=\"https://www.themoviedb.org/\" target=\"_blank\" rel=\"noreferrer\"><TMDBLogoImg src={TMDBLogo} alt='tmdb-logo' /></a>\n        </Content>\n    </Wrapper>\n)\n\nexport default Header; ","// Configuration for TMDB API\n// Read more about the API here: https://developers.themoviedb.org/\n\nconst API_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\n\nconst SEARCH_BASE_URL = `${API_URL}search/movie?api_key=${API_KEY}&language=en-US&query=`;\nconst POPULAR_BASE_URL = `${API_URL}movie/popular?api_key=${API_KEY}&language=en-US`;\n// For login and voting\nconst REQUEST_TOKEN_URL = `${API_URL}authentication/token/new?api_key=${API_KEY}`;\nconst LOGIN_URL = `${API_URL}authentication/token/validate_with_login?api_key=${API_KEY}`;\nconst SESSION_ID_URL = `${API_URL}authentication/session/new?api_key=${API_KEY}`;\n\nconst IMAGE_BASE_URL = 'http://image.tmdb.org/t/p/';\n// Sizes: w300, w780, w1280, original\nconst BACKDROP_SIZE = 'w1280';\n// w92, w154, w185, w342, w500, w780, original\nconst POSTER_SIZE = 'w780';\n\nexport {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  IMAGE_BASE_URL,\n  BACKDROP_SIZE,\n  POSTER_SIZE,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL,\n};\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    background: linear-gradient(\n        to bottom, rgba(0, 0, 0, 0)\n        41%, rgba(0, 0, 0, 0.65)\n        100%\n    ),\n    url(${({image}) => image}), var(--darkGrey);\n    background-size: 100%, cover;\n    background-position: center;\n    height: 600px;\n    position: relative;\n    animation: animateHeroImage 1s;\n\n    @keyframes animateHeroImage {\n        from {\n            opacity: 0;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n`;\n\nexport const Content = styled.div`\n    padding: 20px;\n    max-width: var(--maxWidth);\n    margin: 0 auto;\n`;\n\nexport const Text = styled.div`\n    z-index: 100;\n    max-width: 700px;\n    position: absolute;\n    bottom: 40px;\n    marigin-right: 20px;\n    min-height: 100px;\n    color: var(--white);\n\n    h1 {\n        font-size: var(--fontSuperBig);\n\n        @media screen and (max-width: 720px){\n            font-size: var(--fontBig);\n        }\n    }\n\n    p {\n        font-size: var(--fontMed);\n\n        @media screen and (max-width: 720px) {\n            font-size: var(--fontSmall);\n        }\n    }\n\n    @media screen and (max-width: 720px) {\n        max-width: 100%;\n    }\n`;","import React from 'react';\nimport PropTypes from 'prop-types'\n\n// Styles\nimport { Wrapper, Content, Text } from './HeroImage.styles';\n\nconst HeroImage = ({ image, title, text }) => (\n    <Wrapper image={image}>\n        <Content>\n            <Text>\n                <h1>{title}</h1>\n                <p>{text}</p>\n            </Text>\n        </Content>\n    </Wrapper>\n)\n\nHeroImage.propTypes = {\n    image: PropTypes.string,\n    title: PropTypes.string,\n    text: PropTypes.string\n}\n\nexport default HeroImage;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    max-width: var(--maxWidth);\n    margin: 0 auto;\n    padding: 0 20px; \n\n    h1 {\n        color: var(--medGrey);\n\n        @media screen and (max-width: 768px){\n            font-size: var(--fontBig);\n        }\n    }\n`;\n\nexport const Content = styled.div`\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n    grid-gap: 2rem;\n\n`;\n\n","import React from 'react';\nimport PropTypes from 'prop-types'\n\n// Styles\nimport { Wrapper, Content } from './Grid.styles';\n\nconst Grid = ({ header, children }) => (\n    <Wrapper>\n        <h1>{header}</h1>\n        <Content>\n            {children}\n        </Content>\n    </Wrapper>\n)\n\nGrid.propTypes = {\n    header: PropTypes.string\n}\n\nexport default Grid;","import styled from 'styled-components'\n\nexport const Image = styled.img`\n    width: 100%;\n    max-width: 720px;\n    transition: all 0.3s;\n    object-fit: cover;\n    border-radius: 20px;\n    animation: animateThumb 0.5s;\n    cursor: pointer;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n    @keyframes animateThumb{\n        from {\n            opacity: 0;\n        } \n        to {\n            opacity: 1;\n        }\n        \n    }\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'\n\n// Styles\nimport { Image } from './Thumb.styles'\n\nconst Thumb = ({ image, movieId, clickable }) => (\n    <div>\n        {clickable ? (\n            <Link to={`/${movieId}`}>\n                <Image src={image} alt='movie-thumb' />\n            </Link>\n        ) : (\n          <Image src={image} alt='movie-thumb' />\n        )}\n    </div>\n);\n\nThumb.propTypes = {\n    image: PropTypes.string,\n    movieId: PropTypes.number,\n    clickable: PropTypes.bool\n}\n\nexport default Thumb;","import { Spinner } from './Spinner.styles';\n\nexport default Spinner;","import styled from 'styled-components'\n\nexport const Spinner = styled.div`\n    border: 5px solid var(--lightGrey);\n    border-top: 5px solid var(--medGrey);\n    border-radius: 50%;\n    width: 50px;\n    height: 50px;\n    animation: spin 0.8s linear infinite;\n    margin: 20px auto;\n\n    @keyframes spin {\n        0% {\n            transform: rotate(0deg);\n        }\n        100% {\n            transform: rotate(360deg);\n        }\n    }\n`;","export default __webpack_public_path__ + \"static/media/search-icon.cd820f5a.svg\";","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    height: 100px;\n    background: var(--darkGrey);\n    padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n    position: relative;\n    max-width: var(--maxWidth);\n    width: 100%;\n    height: 55px;\n    background: var(--medGrey);\n    margin: 0 auto;\n    border-radius: 40px;\n    color: var(--white);\n\n    img {\n        position: absolute;\n        left: 15px;\n        top: 14px;\n        width: 30px;\n    }\n\n    input {\n        font-size: var(--fontBig);\n        position: absolute;\n        left: 0;\n        margin: 8px 0;\n        padding: 0 0 0 60px;\n        border: 0;\n        width: 95%;\n        background: transparent;\n        height: 40px;\n        color: var(--white);\n\n        :focus{\n            outline: none;\n        }\n\n        @media screen and (max-width: 768px) {\n            font-size: 1.2rem;\n        }\n    }\n`;","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types'\n\n// Image\nimport searchIcon from '../../images/search-icon.svg'\n\n// Styles\nimport { Wrapper, Content } from './SearchBar.styles'\n\n\nconst SearchBar = ({ setSearchTerm }) => {\n    const [state, setState] = useState('');\n    // Using useRef to skip initial useEffect on render\n    const initial = useRef(true);\n\n    \n    console.log(state)\n\n    useEffect(() => {\n        // To skip the initial useEffect on render\n        if (initial.current) {\n            initial.current = false\n            return;\n        }\n        console.log('useEffect trigger')\n        const timer = setTimeout(() => {\n            setSearchTerm(state);\n        }, 500)\n\n        return () => clearTimeout(timer);\n    },[setSearchTerm, state])\n\n    return (\n        <Wrapper>\n            <Content>\n                <img src={searchIcon} alt='search-icon'/>\n                <input\n                    type='text'\n                    placeholder='Search Movie'\n                    // Using inline function to pass the value to the state\n                    onChange={event => setState(event.currentTarget.value)}\n                    value={state}\n                />\n            </Content>\n        </Wrapper>\n    )\n}\n\nSearchBar.propTypes = {\n    callback: PropTypes.func\n}\n\nexport default SearchBar;","import styled from 'styled-components'\n\nexport const Wrapper = styled.button`\n    display: block;\n    background: var(--darkGrey);\n    width: 25%;\n    min-width: 200px;\n    height: 60px;\n    border-radius: 30px;\n    color: var(--white);\n    border: 0;\n    font-size: var(--fontBig);\n    margin: 20px auto;\n    transition: all 0.3s;\n    outline: none;\n    cursor: pointer;\n\n    :hover {\n        opacity: 0.8;\n    }\n\n`;","import React from 'react';\nimport PropTypes from 'prop-types'\n\n// Styles\nimport { Wrapper } from './Button.styles';\n\nconst Button = ({ text, callback }) => (\n    <Wrapper type=\"button\" onClick={callback}>\n        {text}\n    </Wrapper>\n)\n\nButton.propTypes = {\n    text: PropTypes.string,\n    callback: PropTypes.func\n}\n\nexport default Button;","import {\n  SEARCH_BASE_URL,\n  POPULAR_BASE_URL,\n  API_URL,\n  API_KEY,\n  REQUEST_TOKEN_URL,\n  LOGIN_URL,\n  SESSION_ID_URL\n} from './config';\n\nconst defaultConfig = {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n};\n\nconst apiSettings = {\n  fetchMovies: async (searchTerm, page) => {\n    const endpoint = searchTerm\n      ? `${SEARCH_BASE_URL}${searchTerm}&page=${page}`\n      : `${POPULAR_BASE_URL}&page=${page}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchMovie: async movieId => {\n    const endpoint = `${API_URL}movie/${movieId}?api_key=${API_KEY}`;\n    return await (await fetch(endpoint)).json();\n  },\n  fetchCredits: async movieId => {\n    const creditsEndpoint = `${API_URL}movie/${movieId}/credits?api_key=${API_KEY}`;\n    return await (await fetch(creditsEndpoint)).json();\n  },\n  // Bonus material below for login\n  getRequestToken: async () => {\n    const reqToken = await (await fetch(REQUEST_TOKEN_URL)).json();\n    return reqToken.request_token;\n  },\n  authenticate: async (requestToken, username, password) => {\n    const bodyData = {\n      username,\n      password,\n      request_token: requestToken\n    };\n    // First authenticate the requestToken\n    const data = await (\n      await fetch(LOGIN_URL, {\n        ...defaultConfig,\n        body: JSON.stringify(bodyData)\n      })\n    ).json();\n    // Then get the sessionId with the requestToken\n    if (data.success) {\n      const sessionId = await (\n        await fetch(SESSION_ID_URL, {\n          ...defaultConfig,\n          body: JSON.stringify({ request_token: requestToken })\n        })\n      ).json();\n      return sessionId;\n    }\n  },\n  rateMovie: async (sessionId, movieId, value) => {\n    const endpoint = `${API_URL}movie/${movieId}/rating?api_key=${API_KEY}&session_id=${sessionId}`;\n\n    const rating = await (\n      await fetch(endpoint, {\n        ...defaultConfig,\n        body: JSON.stringify({ value })\n      })\n    ).json();\n\n    return rating;\n  }\n};\n\nexport default apiSettings;\n","// Convert time to hours and minutes\nexport const calcTime = time => {\n  const hours = Math.floor(time / 60);\n  const mins = time % 60;\n  return `${hours}h ${mins}m`;\n};\n\n\n// Convert a number to money formatting\nexport const convertMoney = money => {\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0,\n  });\n  return formatter.format(money);\n};\n\n\nexport const isPersistedState = stateName => {\n  const sessionState = sessionStorage.getItem(stateName);\n  return sessionState && JSON.parse(sessionState);\n};","import { useState, useEffect } from \"react\";\n// API\nimport API from '../API'\n\n// Helpers\nimport { isPersistedState } from '../helpers'\n\nconst initialState = {\n    page: 0,\n    results: [],\n    total_pages: 0,\n    total_results: 0\n}\n\nexport const useHomeFetch = () => {\n    const [searchTerm, setSearchTerm] = useState('');\n\n    // State to hold all the movies\n    const [state, setState] = useState(initialState);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(false);\n\n    // Triggered by the button\n    const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n   \n\n    const fetchMovies = async (page, searchTerm = \"\") => {\n        try {\n            setError(false);\n            setLoading(true);\n\n            const movies = await API.fetchMovies(searchTerm, page);\n\n            setState(prev => ({\n                ...movies,\n                results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n            }));\n        } catch (error) {\n            setError(true);\n        }\n\n        setLoading(false);\n    } \n\n    // Initial and search\n    useEffect(() => {\n        if (!searchTerm) {\n            const sessionState = isPersistedState('homeState');\n\n            if (sessionState) {\n                console.log('Grabbing from sessionStorage')\n                setState(sessionState)\n                return;\n            }\n        }\n\n        console.log('Grabbing from api')\n        setState(initialState)\n        fetchMovies(1, searchTerm)\n    }, [searchTerm])\n    \n    // Load More\n    useEffect(() => {\n        if(!isLoadingMore) return;\n\n        fetchMovies(state.page + 1, searchTerm);\n        setIsLoadingMore(false);\n\n    }, [isLoadingMore, state.page, searchTerm])\n\n    // Write to sessionStorage\n    useEffect(() => {\n        if (!searchTerm) sessionStorage.setItem('homeState', JSON.stringify(state));\n\n    }, [searchTerm, state])\n\n\n    return { state, loading, error, setSearchTerm, searchTerm, setIsLoadingMore };\n}","export default __webpack_public_path__ + \"static/media/no_image.22d2aa4d.jpg\";","\n// Config\nimport { POSTER_SIZE, BACKDROP_SIZE, IMAGE_BASE_URL } from '../config'\n\n// Components\nimport HeroImage from './HeroImage'\nimport Grid from './Grid'\nimport Thumb from './Thumb'\nimport Spinner from './Spinner'\nimport SearchBar from './SearchBar'\nimport Button from './Button'\n\n// Custom Hook\nimport { useHomeFetch } from '../hooks/useHomeFetch';\n// Image\nimport NoImage from '../images/no_image.jpg'\n\n\nconst Home = () => {\n\n    // destructuring the objects from the useHomeFetch module\n    const { \n        state, \n        loading, \n        error, \n        setSearchTerm, \n        searchTerm, \n        setIsLoadingMore \n    } = useHomeFetch();\n    \n    console.log(state);\n\n    if (error) return <div>Something went wrong ...</div>\n\n    return (\n     <>\n        {!searchTerm && state.results[0] ? (\n        <HeroImage \n            image={`${IMAGE_BASE_URL}${BACKDROP_SIZE}${state.results[0].backdrop_path}`}\n            title={state.results[0].original_title}\n            text={state.results[0].overview}\n        />\n       ) : null}\n\n       <SearchBar setSearchTerm={setSearchTerm}/>\n       <Grid header={searchTerm ? 'Search Results' : 'Popular Movies' }>\n           {state.results.map(movie => (\n                <Thumb\n                    key={movie.id}\n                    clickable\n                    image={\n                        movie.poster_path ?\n                        IMAGE_BASE_URL + POSTER_SIZE + movie.poster_path\n                        : NoImage\n                    } \n                    movieId={movie.id}\n                />\n           ))}\n       </Grid>\n       {loading && <Spinner />}\n       {state.page < state.total_pages && !loading && (\n           <Button text='Load More' callback={() => setIsLoadingMore(true)} />\n       )}\n     </> \n    )\n}\n\nexport default Home;\n","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    width: 100%;\n    height: 70px;\n    background: var(--medGrey);\n    color: var(--white);\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    width: 100%;\n    max-width: var(--maxWidth);\n    padding: 0 20px;\n    \n    span {\n        font-size: var(--fontMed);\n        color: var(--white);\n        padding-right: 10px;\n\n        @media screen and (max-width: 768px){\n            font-size: var(--fontSmall);\n        }\n    }\n`;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types'\n\n\n// Styles\nimport { Wrapper, Content } from './BreadCrumb.styles';\n\nconst BreadCrumb = ({ movieTitle }) => (\n    <Wrapper>\n        <Content>\n            <Link to='/react-movie-db'>\n                <span>Home</span>\n            </Link>\n            <span>|</span>\n            <span>{movieTitle}</span>\n        </Content>\n    </Wrapper>\n)\n\nBreadCrumb.propTypes = {\n    movieTitle: PropTypes.string\n}\n\nexport default BreadCrumb;","import styled from 'styled-components';\n\n\n// Image params\nimport { IMAGE_BASE_URL, BACKDROP_SIZE } from '../../config';\n\nexport const Wrapper = styled.div`\n    background: ${ ({ backdrop }) => \n        backdrop ? `url(${IMAGE_BASE_URL}${BACKDROP_SIZE}${backdrop})`\n        : '#000'\n    };\n    background-size: cover;\n    padding: 40px 20px;\n    animation: animateMovieInfo 1s;\n\n    @keyframes animateMovieInfo {\n        from {\n            opacity: 0;\n        }\n        to {\n            opacity: 1;\n        }\n    }\n\n\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    max-width: var(--maxWidth);\n    margin: 0 auto;\n    background: rgba(0, 0, 0, 0.7);\n    border-radius: 20px;\n\n    @media screen and (max-width: 768px) {\n        display: block;\n        max-height: none;\n    }\n`;\n\nexport const Text = styled.div`\n    width: 100%;\n    padding: 20px 40px;\n    color: var(--white);\n    overflow: hidden;\n\n    .rating-directors{\n        display: flex;\n        justify-content: flex-start;\n    }\n\n    .score {\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        width: 35px;\n        height: 35px;\n        background: #fff;\n        color: black;\n        font-weight: 800;\n        border-radius: 50%;\n        margin: 0;\n    }\n\n    .directors {\n        margin: 0 0 0 40px;\n        \n\n        p {\n            margin: 0;\n        }\n    }\n\n    h1 {\n        @media screen and (max-width: 768px) {\n            font-size: var(--fontBig)\n        }\n    }\n\n`;","import React from 'react';\nimport PropTypes from 'prop-types'\n\n// Components\nimport Thumb from '../Thumb';\n\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../../config';\n\n// Image \nimport NoImage from '../../images/no_image.jpg';\n\n// Styles\nimport { Wrapper, Content, Text } from './MovieInfo.styles';\n\nconst MovieInfo = ({ movie }) => (\n    <Wrapper backdrop={movie.backdrop_path}>\n        <Content>\n            <Thumb\n                image={\n                    movie.poster_path\n                    ? `${IMAGE_BASE_URL}${POSTER_SIZE}${movie.poster_path}`\n                    : NoImage\n                }\n                clickable={false}\n                alt='movie-thumb'\n            />\n            <Text>\n                <h1>{movie.title}</h1>\n\n                <h3>PLOT</h3>\n\n                <p>{movie.overview}</p>\n\n                <div className=\"rating-directors\">\n                    <div>\n                        <h3>RATING</h3>\n\n                        <div className=\"score\">\n                            {movie.vote_average}\n                        </div>\n                    </div>\n\n                    <div className=\"directors\">\n                        <h3>DIRECTOR{movie.directors.length > 1 ? 'S' : ''}</h3>\n                        {movie.directors.map(director => (\n                            <p key={director.credit_id}>{director.name}</p>\n                         ))}\n                     </div>\n\n                </div>\n            </Text>\n        </Content>\n\n    </Wrapper>\n)\n\nMovieInfo.propTypes = {\n    movie: PropTypes.object,\n}\n\nexport default MovieInfo;","import styled from 'styled-components';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    align-items: center;\n    min-height: 100px;\n    background: var(--darkGrey);\n    padding: 0 20px;\n`;\n\nexport const Content = styled.div`\n    display: flex;\n    max-width: var(--maxWidth);\n    width: 100%;\n    margin: 0 auto;\n    color: var(--white);\n\n    .column {\n        display: flex;\n        align-itemms: center;\n        justify-content: center;\n        background: var(--medGrey);\n        border-radius: 20px;\n        margin: 0 20px;\n        flex: 1;\n\n        :first-child {\n            margin-left: 0;\n        }\n\n        :last-child {\n            margin-right: 0;\n        }\n    }\n\n    @media screen and (max-width: 768px) {\n        display: block;\n\n        .column {\n            margin: 20px 0;\n        }\n    }\n`;","import React from 'react';\nimport PropTypes from 'prop-types'\n\n// Helpers\nimport { calcTime, convertMoney } from '../../helpers';\n\n// Styles\nimport { Wrapper, Content } from './MovieInfoBar.styles';\n\n\nconst MovieInfoBar = ({ time, budget, revenue }) => (\n    <Wrapper>\n        <Content>\n            <div className=\"column\">\n                <p>Running time: {calcTime(time)}</p>\n            </div>\n            \n            <div className=\"column\">\n                <p>Budget: {convertMoney(budget)}</p>\n            </div>\n\n            <div className=\"column\">\n                <p>Revenue: {convertMoney(revenue)}</p>\n            </div>\n\n        </Content>\n\n    </Wrapper>\n)\n\nMovieInfoBar.propTypes = {\n    time: PropTypes.number,\n    budget: PropTypes.number,\n    revenue: PropTypes.number\n}\n\nexport default MovieInfoBar;","import styled from 'styled-components'\n\nexport const Wrapper = styled.div`\n    color: var(--white);\n    background: var(--darkGrey);\n    border-radius: 20px;\n    padding: 5px;\n    text-align: center;\n\n    h3 {\n        margin: 10px 0 0 0;\n    }\n\n    p {\n        margin: 5px 0;\n    }\n`;\n\nexport const Image = styled.img`\n    display: block;\n    width: 100%;\n    height: 200px;\n    object-fit: cover;\n    border-radius: 15px;\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\n\n// Styles\nimport { Wrapper, Image } from './Actor.styles';\n\n\nconst Actor = ({ name, character, imageUrl }) => (\n    <Wrapper>\n        <Image src={imageUrl} alt='actor-thumb' />\n        <h3>{name}</h3>\n        <p>{character}</p>\n    </Wrapper>\n);\n\nActor.propTypes = {\n    name: PropTypes.string,\n    character: PropTypes.string,\n    imageUrl: PropTypes.string\n}\n\nexport default Actor;","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\n\n// Config\nimport { IMAGE_BASE_URL, POSTER_SIZE } from '../config';\n\n// Components\nimport Grid from './Grid';\nimport Spinner from './Spinner';\nimport BreadCrumb from './BreadCrumb';\nimport MovieInfo from './MovieInfo';\nimport MovieInfoBar from './MovieInfoBar';\nimport Actor from './Actor';\n\n// Hook\nimport { useMovieFetch } from '../hooks/useMovieFetch';\n\n// Image\nimport NoImage from '../images/no_image.jpg';\n\nconst Movie = () => {\n    // Grab the movieId using useParams hook\n    const { movieId } = useParams();\n\n    const { state: movie, loading, error } = useMovieFetch(movieId)\n    \n    if (loading) return <Spinner />\n    if (error) return <div>Something went wrong... </div>;\n\n    return (\n        <>\n            <BreadCrumb movieTitle={movie.original_title}/>\n            <MovieInfo movie={movie} />\n            <MovieInfoBar \n                time={movie.runtime} \n                budget={movie.budget} \n                revenue={movie.revenue}\n            />\n            <Grid header='Actors'>\n                {movie.actors.map(actor => (\n                    <Actor\n                        key={actor.credit_id}\n                        name={actor.name}\n                        character={actor.character}\n                        imageUrl={\n                            actor.profile_path\n                            ? `${IMAGE_BASE_URL}${POSTER_SIZE}${actor.profile_path}` : NoImage\n                        }\n                    />\n                ))}\n            </Grid>\n        </>\n    )\n}\n\n\nexport default Movie;","import { useEffect, useState } from \"react\";\n\n// Helpers\nimport { isPersistedState } from '../helpers';\n\n// API\nimport API from '../API';\n\nexport const useMovieFetch = movieId => {\n    const [state, setState] = useState({});\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(false);\n\n\n    useEffect(() => {\n        const fetchMovie = async () => {\n            try {\n                setLoading(true);\n                setError(false);\n\n                const movie = await API.fetchMovie(movieId);\n                const credits = await API.fetchCredits(movieId);\n                // Get directors only\n                const directors = credits.crew.filter(\n                    member => member.job === 'Director'\n                )\n\n                setState({\n                    ...movie,\n                    actors: credits.cast,\n                    directors\n                })\n\n                setLoading(false);\n            } catch (error) {\n                setError(true);\n            }\n        };\n\n        const sessionState = isPersistedState(movieId);\n\n        if (sessionState) {\n            setState(sessionState)\n            setLoading(false)\n            return;\n        }\n\n        fetchMovie();\n    }, [movieId])\n\n\n    // Write to sessionStorage\n    useEffect(() => {\n        sessionStorage.setItem(movieId, JSON.stringify(state))\n    }, [movieId, state])\n\n    return { state, loading, error };\n}","import React from 'react';\n\nconst NotFound = () => <div>Not Found</div>\n\n\nexport default NotFound;","import { createGlobalStyle } from \"styled-components\";\n\n\n\nexport const GlobalStyle = createGlobalStyle`\n    :root {\n        --maxWidth: 1280px;\n        --white: #fff;\n        --lightGrey: #eee;\n        --medGrey: #353535;\n        --darkGrey: #1c1c1c;\n        --fontSuperBig: 2.5rem;\n        --fontBig: 1.5rem;\n        --fontMed: 1.2rem;\n        --fontSmall: 1rem;\n    }\n\n    * {\n        box-sizing: border-box;\n        font-family: 'Abel', sans-serif;\n    }\n\n    body {\n        margin: 0;\n        padding: 0;\n\n        h1 {\n            font-size: 2rem;\n            font-weight: 600;\n            color: var(--white);\n        }\n\n        h3 {\n            font-size: 1.1rem;\n            font-weight: 600;\n        }\n\n        p {\n            font-size: 1rem;\n            color: var(--white);\n        }\n    }\n`;","import React from 'react';\n\n// Routing\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; \n\n// Components\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport Movie from './components/Movie';\nimport NotFound from './components/NotFound';\n\n\n\n// Styles\nimport { GlobalStyle } from './GlobalStyle';\n\n\nconst App = () => (\n    <Router>\n      <Header />\n      <Routes>\n        <Route path='/react-movie-db' element={<Home />} />\n        <Route path='/:movieId' element={<Movie/>} />\n        <Route path='/*' element={<NotFound/>} />\n\n      </Routes>\n      <GlobalStyle />\n    </Router>\n);\n\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}